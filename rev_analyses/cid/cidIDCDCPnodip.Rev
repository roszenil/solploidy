#########################################################################################################
#
# MuHiSSE for Polyploidy and Diploidization in Solanaceae
# asymmetrical rates for hidden state
#
# authors: Rosana Zenil-Ferguson
# Last updated: 05/09/2019
#########################################################################################################

setOption("useScaling", "true")


NUM_STATES=3
NUM_HIDDEN = 2
NUM_RATES = NUM_STATES * NUM_HIDDEN
#########################
# Read in the data
#########################/home/eeg/shared/twostatesse/muhissenodip/
observed_phylogeny <- readTrees("/home/eeg/shared/twostatesse/cid/fullmatchtree.nex")[1]
data <- readCharacterDataDelimited("/home/eeg/shared/twostatesse/cid/threestate2.tsv",stateLabels=3,type="NaturalNumbers",delimiter="\t",headers=FALSE)
# Get some useful variables from the data. We need these later on
taxa <- observed_phylogeny.taxa()
data_exp <- data.expandCharacters(2)
# set my move index
mvi = 0
mni = 0

H = 0.587405

####################
# Create the rates #
####################

### Specify a prior on the diversification and turnover rate

### Create the constant prior parameters of the diversification rates
## Number of surviving lineages is 651
rate_mean <- ln( ln(651/2.0) / observed_phylogeny.rootAge() )
rate_sd <- 2*H

### Create a lognormal distributed variable for the diversification rate
speciation_alpha ~ dnNormal(mean=rate_mean,sd=rate_sd)
moves[++mvi] = mvSlide(speciation_alpha,delta=0.20,tune=true,weight=3.0)


### Create a lognormal distributed variable for the turnover rate
extinction_alpha ~ dnNormal(mean=rate_mean,sd=rate_sd)
moves[++mvi] = mvSlide(extinction_alpha,delta=0.20,tune=true,weight=3.0)



speciation_beta ~ dnExp(1.0)
moves[++mvi] = mvScale(speciation_beta,lambda=0.20,tune=true,weight=2.0)

### Create an normal distributed variable for the turnover rate
extinction_beta ~ dnNormal(0.0,1.0)
moves[++mvi] = mvSlide(extinction_beta,delta=0.20,tune=true,weight=2.0)

for (j in 1:NUM_HIDDEN) {
for (i in 1:NUM_STATES) {
if ( j == 1) {
speciation[i] := exp( speciation_alpha )
extinction[i] := exp( extinction_alpha )
} else {
index = i+(j*NUM_STATES)-NUM_STATES
speciation[index] := speciation[index-NUM_STATES] * exp( speciation_beta )
extinction[index] := exp( extinction_alpha + extinction_beta )
}
}
}

#########################################################
# Set up the transition rate matrix for observed states #
#########################################################
## When I defined very loosely my gamma priors for rate  of polyploidy in the Q-mat
shape_pr := 0.5
rate_pr := 1
############### Alternative definition or rate parameter
# Each transition rate between observed states are drawn
# from an exponential distribution with a mean of 10
# character state transitions over the tree.
# shape_pr := 0.5
# rate_pr := observed_phylogeny.treeLength() / 10

### Rate parameters in the Q matrix that aren't zero
rate_12 ~ dnGamma(shape=shape_pr, rate=rate_pr) ### Polyploidization
rate_21 = 0 ### No diploidization
rate_31 ~ dnGamma(shape=shape_pr, rate=rate_pr) ### SI to SC
rate_32 ~ dnGamma(shape=shape_pr, rate=rate_pr) ### SI to Polyploidy

moves[++mvi] = mvScale( rate_12, weight=2 )
moves[++mvi] = mvScale( rate_31, weight=2 )
moves[++mvi] = mvScale( rate_32, weight=2 )



# first initialize the matrix with all zeros:
for (i in 1:3) {
for (j in 1:3) {
q[i][j] := 0.0
}
}
q[1][2] := rate_12
q[3][1] := rate_31
q[3][2] := rate_32

# generate the actual matrix
Q := fnFreeK(q, rescaled=false, matrixExponentialMethod="scalingAndSquaring")

#########################################################
# Set up the transition rate matrix for hidden states #
#########################################################

# We assume the transitions among the hidden states
# are all equal and drawn from an exponential distriubtion.
hidden_rate1 ~ dnExponential(rate_pr)
moves[++mvi] = mvScale(hidden_rate1,lambda=0.2,tune=true,weight=5)
hidden_rate2 ~ dnExponential(rate_pr)
moves[++mvi] = mvScale(hidden_rate2,lambda=0.2,tune=true,weight=5)
#### Here the hidden rates should go (alpha,beta, alpha, beta) for assymetrical models
R[1]:= hidden_rate1
R[2]:= hidden_rate2
######################################################################
# Create the rate matrix for the combined observed and hidden states #
######################################################################
rate_matrix := fnHiddenStateRateMatrix(Q, R, rescaled=false)



### Create a constant variable with the prior probabilities of each rate category at the root.
rate_category_prior ~ dnDirichlet( rep(1,NUM_RATES) )
moves[++mvi] = mvDirichletSimplex(rate_category_prior,tune=true,weight=2)
moves[++mvi] = mvBetaSimplex(rate_category_prior,tune=true,weight=2)

### rho is the probability of sampling species at the present
### Adding sampling of species via rho parameter
### fix this to 651/3000
rho <- observed_phylogeny.ntips()/3000


### Create the fix parameter for the age of the root set to the observed age
root <- observed_phylogeny.rootAge()

#### construct a variable for the tree drawn from a birth death process
timetree ~ dnCDBDP( rootAge = root,
speciationRates   = speciation,
extinctionRates   = extinction,
Q                 = rate_matrix,
pi                = rate_category_prior,
delta             = 1.0,
rho               = rho)

### clamp the model with the "observed" tree
timetree.clamp( observed_phylogeny )
timetree.clampCharData( data_exp )

#############
# The Model #
#############


### workspace model wrapper ###
mymodel = model(rate_matrix)

### set up the monitors that will output parameter values to file and screen
monitors[++mni] = mnModel(filename="/home/eeg/shared/twostatesse/cid/output/cid3nodip.log", printgen=1)

monitors[++mni] = mnJointConditionalAncestralState(tree=timetree, cdbdp=timetree, type="NaturalNumbers", printgen=100, withTips=true, withStartStates=false, filename="/home/eeg/shared/twostatesse/cid/output/anc_states_cid3nodip.log")
#monitors[++mni] = mnStochasticCharacterMap(cdbdp=timetree, filename="/home/eeg/shared/twostatesse/muhissenodip/output/SCM_asym100K.log", printgen=100)
monitors[++mni] = mnScreen(printgen=10, Q, R)

################
# The Analysis #
################

### workspace mcmc
mymcmc = mcmc(mymodel, monitors, moves, nruns=1, moveschedule="random")

### pre-burnin to tune the proposals
mymcmc.burnin(generations=5000,tuningInterval=100)

### run the MCMC
mymcmc.run(generations=200000)

##############################
# Summarize ancestral states #
##############################


#anc_states = readAncestralStateTrace("/home/eeg/shared/twostatesse/cid/output/anc_states_cid3nodip.log")
#anc_tree = ancestralStateTree(tree=observed_phylogeny, ancestral_state_trace_vector=anc_states, include_start_states=false, file="//home/eeg/shared/twostatesse/cid/output/anc_states_cid3nodip.tree", burnin=5000, summary_statistic="MAP", site=0)

q()







