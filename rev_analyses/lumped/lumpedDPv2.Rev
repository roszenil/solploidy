#########################################################################################################
#
# MuSSE for Polyploidy and Diploidization in Solanaceae LUMPED for DP
#
# authors: Rosana Zenil-Ferguson
# Last updated: 06/05/2019
#########################################################################################################

setOption("useScaling", "true")


NUM_STATES=3
#########################
# Read in the data
#########################
observed_phylogeny <- readTrees("/home/eeg/shared/twostatesse/lumped/fullmatchtree.nex")[1]
data <- readCharacterDataDelimited("/home/eeg/shared/twostatesse/lumped/threestate2.tsv",stateLabels=3,type="NaturalNumbers",delimiter="\t",headers=FALSE)
# Get some useful variables from the data. We need these later on
taxa <- observed_phylogeny.taxa()

# set my move index
mvi = 0
mni = 0

H = 0.587405

####################
# Create the rates #
####################

### Specify a prior on the diversification and turnover rate

### Create the constant prior parameters of the diversification rates
## Number of surviving lineages is 651
rate_mean <- ln( ln(651/2.0) / observed_phylogeny.rootAge() )
rate_sd <- 2*H



### Create a lognormal distributed variable for the diversification rate
log_speciation[1] ~ dnNormal(mean=rate_mean,sd=rate_sd)
log_speciation[1].setValue( rate_mean )
speciation[1] := exp( log_speciation[1] )
moves[++mvi] = mvSlide(log_speciation[1],delta=0.20,tune=true,weight=3.0)

### Create a lognormal distributed variable for the turnover rate
log_extinction[1] ~ dnNormal(mean=rate_mean,sd=rate_sd)
log_extinction[1].setValue( rate_mean )
extinction[1] := exp( log_extinction[1] )
moves[++mvi] = mvSlide(log_extinction[1],delta=0.20,tune=true,weight=3)


log_speciation[2] ~ dnNormal(mean=rate_mean,sd=rate_sd)
log_speciation[2].setValue( rate_mean )
speciation[2] := exp( log_speciation[2] )
moves[++mvi] = mvSlide(log_speciation[2],delta=0.20,tune=true,weight=3.0)

### Create a lognormal distributed variable for the turnover rate
log_extinction[2] ~ dnNormal(mean=rate_mean,sd=rate_sd)
log_extinction[2].setValue( rate_mean )
extinction[2] := exp( log_extinction[2] )
moves[++mvi] = mvSlide(log_extinction[2],delta=0.20,tune=true,weight=3)


speciation[3] := speciation[1]
extinction[3] := extinction[1]

#########################################################
# Set up the transition rate matrix for observed states #
#########################################################
## I defined very loosely my gamma priors for rate  of polyploidy in the Q-mat
shape_pr := 0.5
rate_pr := 1
############### Alternative definition or rate parameter
# Each transition rate between observed states are drawn
# from an exponential distribution with a mean of 10
# character state transitions over the tree.
# rate_pr := observed_phylogeny.treeLength() / 10

### Rate parameters in the Q matrix that aren't zero
p0 ~ dnGamma(shape=shape_pr, rate=rate_pr) ### Polyploidization
rate_31 ~ dnGamma(shape=shape_pr, rate=rate_pr) ### SI to SC

moves[++mvi] = mvScale( p0, weight=2 )
moves[++mvi] = mvScale( rate_31, weight=2 )




# first initialize the matrix with all zeros:
for (i in 1:3) {
for (j in 1:3) {
q[i][j] := 0.0
}
}
q[1][2] := p0
q[3][1] := rate_31
q[3][2] := p0

# generate the actual matrix
rate_matrix := fnFreeK(q, rescaled=false, matrixExponentialMethod="scalingAndSquaring")

### Create a constant variable with the prior probabilities of each rate category at the root.
rate_category_prior ~ dnDirichlet( rep(1,NUM_STATES) )
moves[++mvi] = mvDirichletSimplex(rate_category_prior,tune=true,weight=2)

### Create the fix parameter for the age of the root set to the observed age
root <- observed_phylogeny.rootAge()


### rho is the probability of sampling species at the present
### I did not add any sampling of species but it is posible by setting this rho parameter
### fix this to 651/3000
rho <- observed_phylogeny.ntips()/3000

#### construct a variable for the tree drawn from a birth death process
timetree ~ dnCDBDP( rootAge = root,
speciationRates   = speciation,
extinctionRates   = extinction,
Q                 = rate_matrix,
pi                = rate_category_prior,
rho               = rho,
delta             = 1.0,
condition         = "time")

### clamp the model with the "observed" tree
timetree.clamp( observed_phylogeny )
timetree.clampCharData( data )

#############
# The Model #
#############


### workspace model wrapper ###
mymodel = model(rate_matrix)

### set up the monitors that will output parameter values to file and screen /home/eeg/shared/twostatesse/mussenodip
monitors[++mni] = mnModel(filename="/home/eeg/shared/twostatesse/lumped/output/lumpedDP_2.log", printgen=1)

monitors[++mni] = mnJointConditionalAncestralState(tree=timetree, cdbdp=timetree, type="NaturalNumbers", printgen=100, withTips=true, withStartStates=false, filename="/home/eeg/shared/twostatesse/lumped/output/anc_states_lumpedDP_2.log")
monitors[++mni] = mnScreen(printgen=10, p0, speciation, extinction)
monitors[++mni] = mnScreen(printgen=10, rate_31, speciation, extinction)


################
# The Analysis #
################

### workspace mcmc
mymcmc = mcmc(mymodel, monitors, moves, nruns=1, moveschedule="random")

### pre-burnin to tune the proposals
mymcmc.burnin(generations=50000,tuningInterval=100)

### run the MCMC
mymcmc.run(generations=200000)

##############################
# Summarize ancestral states #
##############################


#anc_states = readAncestralStateTrace("basicdata/anc_states_MuSSE_ploidysinodip250K.log")
#anc_tree = ancestralStateTree(tree=observed_phylogeny, ancestral_state_trace_vector=anc_states, include_start_states=false, file="output/anc_states_summaryMuSSEploidysinodip250K.tree", burnin=5000, summary_statistic="MAP", site=0)

q()

#anc_tree = ancestralStateTree(tree=observed_phylogeny, ancestral_state_trace_vector=anc_states, include_start_states=false, file="output/anc_states_summaryMuSSEploidysinodip250K.tree", burnin=5000, summary_statistic="MAP", site=0)



